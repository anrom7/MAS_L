// file: CompetenceOntologyOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package lab3.competenceontology;

import jade.content.onto.*;
import jade.content.schema.*;

/** file: CompetenceOntologyOntology.java
 * @author OntologyBeanGenerator v4.1
 * @version 2015/06/9, 01:26:41
 */
public class CompetenceOntologyOntology extends jade.content.onto.Ontology  {

  private static final long serialVersionUID = 5077151851681497189L;

  //NAME
  public static final String ONTOLOGY_NAME = "CompetenceOntology";
  // The singleton instance of this ontology
  private static Ontology theInstance = new CompetenceOntologyOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String EDUONT_EDUCATION="EduOnt_Education";
    public static final String JOBSEEONT_CANDIDACY="JobSeeOnt_Candidacy";
    public static final String JOBOFFONT_VACANCY="JobOffOnt_Vacancy";
    public static final String COMPETENCE_REQUIRES="requires";
    public static final String COMPETENCE_IS_COMPETENCE_OF_CANDIDACY="is_competence_of_Candidacy";
    public static final String COMPETENCE_IS_ASSOCIATED_WITH_VACANCY="is_associated_with_Vacancy";
    public static final String COMPETENCE="Competence";

  /**
   * Constructor
  */
  private CompetenceOntologyOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema competenceSchema = new ConceptSchema(COMPETENCE);
    add(competenceSchema, Competence.class);
    ConceptSchema jobOffOnt_VacancySchema = new ConceptSchema(JOBOFFONT_VACANCY);
    add(jobOffOnt_VacancySchema, JobOffOnt_Vacancy.class);
    ConceptSchema jobSeeOnt_CandidacySchema = new ConceptSchema(JOBSEEONT_CANDIDACY);
    add(jobSeeOnt_CandidacySchema, JobSeeOnt_Candidacy.class);
    ConceptSchema eduOnt_EducationSchema = new ConceptSchema(EDUONT_EDUCATION);
    add(eduOnt_EducationSchema, EduOnt_Education.class);

    // adding AgentAction(s)

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    competenceSchema.add(COMPETENCE_IS_ASSOCIATED_WITH_VACANCY, jobOffOnt_VacancySchema, 0, ObjectSchema.UNLIMITED);
    competenceSchema.add(COMPETENCE_IS_COMPETENCE_OF_CANDIDACY, jobSeeOnt_CandidacySchema, 0, ObjectSchema.UNLIMITED);
    competenceSchema.add(COMPETENCE_REQUIRES, eduOnt_EducationSchema, 0, ObjectSchema.UNLIMITED);

    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
