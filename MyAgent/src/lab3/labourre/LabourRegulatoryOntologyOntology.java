// file: LabourRegulatoryOntologyOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package lab3.labourre;

import jade.content.onto.BasicOntology;
import jade.content.onto.Ontology;
import jade.content.schema.ConceptSchema;
import jade.content.schema.ObjectSchema;
import jade.content.schema.TermSchema;

/** file: LabourRegulatoryOntologyOntology.java
 * @author OntologyBeanGenerator v4.1
 * @version 2015/06/11, 22:22:55
 */
public class LabourRegulatoryOntologyOntology extends jade.content.onto.Ontology  {

  private static final long serialVersionUID = 5987543401077072536L;

  //NAME
  public static final String ONTOLOGY_NAME = "LabourRegulatoryOntology";
  // The singleton instance of this ontology
  private static Ontology theInstance = new LabourRegulatoryOntologyOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String FULL_TIME="Full_time";
    public static final String CONTRACT_TYPE_LIMITED_DURATION="Limited_duration";
    public static final String CONTRACT_TYPE="Contract_Type";
    public static final String TIME_DATETIMEINTERVAL="Time_DateTimeInterval";
    public static final String WORK_CONDITION_WORK_TIME="work_time";
    public static final String WORK_CONDITION_EXECUTION_TIME="execution_time";
    public static final String WORK_CONDITION_HOURS_WEEK="hours_week";
    public static final String WORK_CONDITION_RELOCATION_REQUIRED="relocation_required";
    public static final String WORK_CONDITION="Work_Condition";
    public static final String JOBSEEONT_OBJECTIVE="JobSeeOnt_Objective";
    public static final String JOBOFFONT_VACANCY="JobOffOnt_Vacancy";
    public static final String PARTIAL_TIME="Partial_time";
    public static final String WORK_TIME_BLL_CODE="bll_code";
    public static final String WORK_TIME_SHIFTS="shifts";
    public static final String WORK_TIME="Work_Time";
    public static final String TIME_DURATIONDESCRIPTION="Time_DurationDescription";

  /**
   * Constructor
  */
  private LabourRegulatoryOntologyOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema time_DurationDescriptionSchema = new ConceptSchema(TIME_DURATIONDESCRIPTION);
    add(time_DurationDescriptionSchema, labourregulatoryontology.ontology.Time_DurationDescription.class);
    ConceptSchema work_TimeSchema = new ConceptSchema(WORK_TIME);
    add(work_TimeSchema, labourregulatoryontology.ontology.Work_Time.class);
    ConceptSchema partial_timeSchema = new ConceptSchema(PARTIAL_TIME);
    add(partial_timeSchema, labourregulatoryontology.ontology.Partial_time.class);
    ConceptSchema jobOffOnt_VacancySchema = new ConceptSchema(JOBOFFONT_VACANCY);
    add(jobOffOnt_VacancySchema, labourregulatoryontology.ontology.JobOffOnt_Vacancy.class);
    ConceptSchema jobSeeOnt_ObjectiveSchema = new ConceptSchema(JOBSEEONT_OBJECTIVE);
    add(jobSeeOnt_ObjectiveSchema, labourregulatoryontology.ontology.JobSeeOnt_Objective.class);
    ConceptSchema work_ConditionSchema = new ConceptSchema(WORK_CONDITION);
    add(work_ConditionSchema, labourregulatoryontology.ontology.Work_Condition.class);
    ConceptSchema time_DateTimeIntervalSchema = new ConceptSchema(TIME_DATETIMEINTERVAL);
    add(time_DateTimeIntervalSchema, labourregulatoryontology.ontology.Time_DateTimeInterval.class);
    ConceptSchema contract_TypeSchema = new ConceptSchema(CONTRACT_TYPE);
    add(contract_TypeSchema, labourregulatoryontology.ontology.Contract_Type.class);
    ConceptSchema full_timeSchema = new ConceptSchema(FULL_TIME);
    add(full_timeSchema, labourregulatoryontology.ontology.Full_time.class);

    // adding AgentAction(s)

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    work_TimeSchema.add(WORK_TIME_SHIFTS, time_DateTimeIntervalSchema, 0, ObjectSchema.UNLIMITED);
    work_TimeSchema.add(WORK_TIME_BLL_CODE, (TermSchema)getSchema(BasicOntology.INTEGER), 0, ObjectSchema.UNLIMITED);
    work_ConditionSchema.add(WORK_CONDITION_RELOCATION_REQUIRED, (TermSchema)getSchema(BasicOntology.BOOLEAN), 0, ObjectSchema.UNLIMITED);
    work_ConditionSchema.add(WORK_CONDITION_HOURS_WEEK, (TermSchema)getSchema(BasicOntology.INTEGER), 0, ObjectSchema.UNLIMITED);
    work_ConditionSchema.add(WORK_CONDITION_EXECUTION_TIME, time_DurationDescriptionSchema, 0, ObjectSchema.UNLIMITED);
    work_ConditionSchema.add(WORK_CONDITION_WORK_TIME, work_TimeSchema, 0, ObjectSchema.UNLIMITED);
    contract_TypeSchema.add(CONTRACT_TYPE_LIMITED_DURATION, (TermSchema)getSchema(BasicOntology.BOOLEAN), 0, ObjectSchema.UNLIMITED);

    // adding name mappings

    // adding inheritance
    partial_timeSchema.addSuperSchema(work_TimeSchema);
    full_timeSchema.addSuperSchema(work_TimeSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
