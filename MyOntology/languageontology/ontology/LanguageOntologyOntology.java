// file: LanguageOntologyOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package languageontology.ontology;

import jade.content.onto.*;
import jade.content.schema.*;

/** file: LanguageOntologyOntology.java
 * @author OntologyBeanGenerator v4.1
 * @version 2015/06/11, 22:55:16
 */
public class LanguageOntologyOntology extends jade.content.onto.Ontology  {

  private static final long serialVersionUID = -7416178792637387560L;

  //NAME
  public static final String ONTOLOGY_NAME = "LanguageOntology";
  // The singleton instance of this ontology
  private static Ontology theInstance = new LanguageOntologyOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String JOBSEEONT_CANDIDACY="JobSeeOnt_Candidacy";
    public static final String LANGUAGE_LEVEL_DESCRIPTION="Description";
    public static final String LANGUAGE_LEVEL_IS_LISTENING_LEVEL_LANGUAGE_PROFICIENCY="is_listening_level_Language_Proficiency";
    public static final String LANGUAGE_LEVEL_IS_SPOKEN_INTERACTION_LEVEL_LANGUAGE_PROFICIENCY="is_spoken_interaction_level_Language_Proficiency";
    public static final String LANGUAGE_LEVEL_IS_WRITING_LEVEL_LANGUAGE_PROFICIENCY="is_writing_level_Language_Proficiency";
    public static final String LANGUAGE_LEVEL_IS_READING_LEVEL_LANGUAGE_PROFICIENCY="is_reading_level_Language_Proficiency";
    public static final String LANGUAGE_LEVEL_IS_SPOKEN_PRODUCTION_LEVEL_LANGUAGE_PROFICIENCY="is_spoken_production_level_Language_Proficiency";
    public static final String LANGUAGE_LEVEL="Language_Level";
    public static final String LANGUAGE_PROFICIENCY_HAS_READING_LEVEL="has_reading_level";
    public static final String LANGUAGE_PROFICIENCY_HAS_SPOKEN_INTERACTION_LEVEL="has_spoken_interaction_level";
    public static final String LANGUAGE_PROFICIENCY_RELATED_LANGUAGE="related_language";
    public static final String LANGUAGE_PROFICIENCY_HAS_LISTENING_LEVEL="has_listening_level";
    public static final String LANGUAGE_PROFICIENCY_HAS_SPOKEN_PRODUCTION_LEVEL="has_spoken_production_level";
    public static final String LANGUAGE_PROFICIENCY_HAS_WRITING_LEVEL="has_writing_level";
    public static final String LANGUAGE_PROFICIENCY="Language_Proficiency";
    public static final String COM_COMPETENCE="Com_Competence";
    public static final String LANGUAGE_CODE="Code";
    public static final String LANGUAGE_IS_SPOKEN_BY_CANDIDACY="is_spoken_by_Candidacy";
    public static final String LANGUAGE_IS_MOTHER_TONGUE_OF_CANDIDACY="is_mother_tongue_of_Candidacy";
    public static final String LANGUAGE="Language";

  /**
   * Constructor
  */
  private LanguageOntologyOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema languageSchema = new ConceptSchema(LANGUAGE);
    add(languageSchema, languageontology.ontology.Language.class);
    ConceptSchema com_CompetenceSchema = new ConceptSchema(COM_COMPETENCE);
    add(com_CompetenceSchema, languageontology.ontology.Com_Competence.class);
    ConceptSchema language_ProficiencySchema = new ConceptSchema(LANGUAGE_PROFICIENCY);
    add(language_ProficiencySchema, languageontology.ontology.Language_Proficiency.class);
    ConceptSchema language_LevelSchema = new ConceptSchema(LANGUAGE_LEVEL);
    add(language_LevelSchema, languageontology.ontology.Language_Level.class);
    ConceptSchema jobSeeOnt_CandidacySchema = new ConceptSchema(JOBSEEONT_CANDIDACY);
    add(jobSeeOnt_CandidacySchema, languageontology.ontology.JobSeeOnt_Candidacy.class);

    // adding AgentAction(s)

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    languageSchema.add(LANGUAGE_IS_MOTHER_TONGUE_OF_CANDIDACY, jobSeeOnt_CandidacySchema, 0, ObjectSchema.UNLIMITED);
    languageSchema.add(LANGUAGE_IS_SPOKEN_BY_CANDIDACY, jobSeeOnt_CandidacySchema, 0, ObjectSchema.UNLIMITED);
    languageSchema.add(LANGUAGE_CODE, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    language_ProficiencySchema.add(LANGUAGE_PROFICIENCY_HAS_WRITING_LEVEL, language_LevelSchema, 0, ObjectSchema.UNLIMITED);
    language_ProficiencySchema.add(LANGUAGE_PROFICIENCY_HAS_SPOKEN_PRODUCTION_LEVEL, language_LevelSchema, 0, ObjectSchema.UNLIMITED);
    language_ProficiencySchema.add(LANGUAGE_PROFICIENCY_HAS_LISTENING_LEVEL, language_LevelSchema, 0, ObjectSchema.UNLIMITED);
    language_ProficiencySchema.add(LANGUAGE_PROFICIENCY_RELATED_LANGUAGE, languageSchema, 0, ObjectSchema.UNLIMITED);
    language_ProficiencySchema.add(LANGUAGE_PROFICIENCY_HAS_SPOKEN_INTERACTION_LEVEL, language_LevelSchema, 0, ObjectSchema.UNLIMITED);
    language_ProficiencySchema.add(LANGUAGE_PROFICIENCY_HAS_READING_LEVEL, language_LevelSchema, 0, ObjectSchema.UNLIMITED);
    language_LevelSchema.add(LANGUAGE_LEVEL_IS_SPOKEN_PRODUCTION_LEVEL_LANGUAGE_PROFICIENCY, language_ProficiencySchema, 0, ObjectSchema.UNLIMITED);
    language_LevelSchema.add(LANGUAGE_LEVEL_IS_READING_LEVEL_LANGUAGE_PROFICIENCY, language_ProficiencySchema, 0, ObjectSchema.UNLIMITED);
    language_LevelSchema.add(LANGUAGE_LEVEL_IS_WRITING_LEVEL_LANGUAGE_PROFICIENCY, language_ProficiencySchema, 0, ObjectSchema.UNLIMITED);
    language_LevelSchema.add(LANGUAGE_LEVEL_IS_SPOKEN_INTERACTION_LEVEL_LANGUAGE_PROFICIENCY, language_ProficiencySchema, 0, ObjectSchema.UNLIMITED);
    language_LevelSchema.add(LANGUAGE_LEVEL_IS_LISTENING_LEVEL_LANGUAGE_PROFICIENCY, language_ProficiencySchema, 0, ObjectSchema.UNLIMITED);
    language_LevelSchema.add(LANGUAGE_LEVEL_DESCRIPTION, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);

    // adding name mappings

    // adding inheritance
    language_ProficiencySchema.addSuperSchema(com_CompetenceSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
