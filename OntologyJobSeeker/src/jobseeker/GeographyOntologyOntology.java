// file: GeographyOntologyOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package jobseeker;

import jade.content.onto.*;
import jade.content.schema.*;

/** file: GeographyOntologyOntology.java
 * @author OntologyBeanGenerator v4.1
 * @version 2015/06/8, 23:11:56
 */
public class GeographyOntologyOntology extends jade.content.onto.Ontology  {

  private static final long serialVersionUID = -1974204183884102668L;

  //NAME
  public static final String ONTOLOGY_NAME = "GeographyOntology";
  // The singleton instance of this ontology
  private static Ontology theInstance = new GeographyOntologyOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String JOBOFFONT_ORGANIZATION="JobOffOnt_Organization";
    public static final String LOCATION_IS_LOCATION_OF_ORGANIZATION="is_location_of_Organization";
    public static final String LOCATION_IS_ASSOCIATED_WITH_VACANCY="is_associated_with_Vacancy";
    public static final String LOCATION="Location";
    public static final String CONTINENT_HAS_COUNTRY_COUNTRY="has_country_Country";
    public static final String CONTINENT="Continent";
    public static final String JOBSEEONT_CANDIDACY="JobSeeOnt_Candidacy";
    public static final String JOBSEEONT_JOB_SEEKER="JobSeeOnt_Job_Seeker";
    public static final String REGION_IS_LOCATED_IN_COUNTRY="is_located_in_Country";
    public static final String REGION="Region";
    public static final String JOBOFFONT_VACANCY="JobOffOnt_Vacancy";
    public static final String COUNTRY_IS_LOCATED_IN_CONTINENT="is_located_in_Continent";
    public static final String COUNTRY_IS_NATION_OF_CANDIDACY="is_nation_of_Candidacy";
    public static final String COUNTRY_HAS_REGION_REGION="has_region_Region";
    public static final String COUNTRY_IS_RESIDENCE_OF_JOB_SEEKER="is_residence_of_Job_Seeker";
    public static final String COUNTRY="Country";

  /**
   * Constructor
  */
  private GeographyOntologyOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema countrySchema = new ConceptSchema(COUNTRY);
    add(countrySchema, Country.class);
    ConceptSchema jobOffOnt_VacancySchema = new ConceptSchema(JOBOFFONT_VACANCY);
    add(jobOffOnt_VacancySchema, JobOffOnt_Vacancy.class);
    ConceptSchema regionSchema = new ConceptSchema(REGION);
    add(regionSchema, Region.class);
    ConceptSchema jobSeeOnt_Job_SeekerSchema = new ConceptSchema(JOBSEEONT_JOB_SEEKER);
    add(jobSeeOnt_Job_SeekerSchema, JobSeeOnt_Job_Seeker.class);
    ConceptSchema jobSeeOnt_CandidacySchema = new ConceptSchema(JOBSEEONT_CANDIDACY);
    add(jobSeeOnt_CandidacySchema, JobSeeOnt_Candidacy.class);
    ConceptSchema continentSchema = new ConceptSchema(CONTINENT);
    add(continentSchema, Continent.class);
    ConceptSchema locationSchema = new ConceptSchema(LOCATION);
    add(locationSchema, Location.class);
    ConceptSchema jobOffOnt_OrganizationSchema = new ConceptSchema(JOBOFFONT_ORGANIZATION);
    add(jobOffOnt_OrganizationSchema, JobOffOnt_Organization.class);

    // adding AgentAction(s)

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    countrySchema.add(COUNTRY_IS_RESIDENCE_OF_JOB_SEEKER, jobSeeOnt_Job_SeekerSchema, 0, ObjectSchema.UNLIMITED);
    countrySchema.add(COUNTRY_HAS_REGION_REGION, regionSchema, 0, ObjectSchema.UNLIMITED);
    countrySchema.add(COUNTRY_IS_NATION_OF_CANDIDACY, jobSeeOnt_CandidacySchema, 0, ObjectSchema.UNLIMITED);
    countrySchema.add(COUNTRY_IS_LOCATED_IN_CONTINENT, continentSchema, 0, ObjectSchema.UNLIMITED);
    regionSchema.add(REGION_IS_LOCATED_IN_COUNTRY, countrySchema, 0, ObjectSchema.UNLIMITED);
    continentSchema.add(CONTINENT_HAS_COUNTRY_COUNTRY, countrySchema, 0, ObjectSchema.UNLIMITED);
    locationSchema.add(LOCATION_IS_ASSOCIATED_WITH_VACANCY, jobOffOnt_VacancySchema, 0, ObjectSchema.UNLIMITED);
    locationSchema.add(LOCATION_IS_LOCATION_OF_ORGANIZATION, jobOffOnt_OrganizationSchema, 0, ObjectSchema.UNLIMITED);

    // adding name mappings

    // adding inheritance
    countrySchema.addSuperSchema(locationSchema);
    regionSchema.addSuperSchema(locationSchema);
    continentSchema.addSuperSchema(locationSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
