// file: JobSeekerOntologyOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package jobseekerontology.ontology;

import jade.content.onto.*;
import jade.content.schema.*;

/** file: JobSeekerOntologyOntology.java
 * @author OntologyBeanGenerator v4.1
 * @version 2015/06/9, 01:43:39
 */
public class JobSeekerOntologyOntology extends jade.content.onto.Ontology  {

  private static final long serialVersionUID = -1973973912326510515L;

  //NAME
  public static final String ONTOLOGY_NAME = "JobSeekerOntology";
  // The singleton instance of this ontology
  private static Ontology theInstance = new JobSeekerOntologyOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String JV_LIST_HAS_ELEMS="has_elems";
    public static final String JV_LIST="JV_List";
    public static final String ECOACTONT_SECTOR="EcoActOnt_Sector";
    public static final String ORGANIZATION_EMAIL="email";
    public static final String ORGANIZATION_FAX="Fax";
    public static final String ORGANIZATION_HAS_JOB_VACANCY="has_job_vacancy";
    public static final String ORGANIZATION_FULL_NAME="Full_Name";
    public static final String ORGANIZATION_NUMBER_WORKERS="number_workers";
    public static final String ORGANIZATION_ADDRESS="Address";
    public static final String ORGANIZATION_CONTACT_PERSON="contact_person";
    public static final String ORGANIZATION_TELEPHONE="Telephone";
    public static final String ORGANIZATION_POSTAL_CODE="Postal_Code";
    public static final String ORGANIZATION="Organization";
    public static final String HOW_TO_APPLY_ID="Id";
    public static final String HOW_TO_APPLY_DESCRIPTION="description";
    public static final String HOW_TO_APPLY="How_To_Apply";
    public static final String REQUESTED_WORK_EXPERIENCE_YEARS="Years";
    public static final String REQUESTED_WORK_EXPERIENCE_IS_ASSOCIATED_WITH="is_associated_with";
    public static final String REQUESTED_WORK_EXPERIENCE="Requested_Work_Experience";
    public static final String TIME_DURATIONDESCRIPTION="Time_DurationDescription";
    public static final String INTERVAL_DATES="dates";
    public static final String INTERVAL="Interval";
    public static final String LABREGONT_CONTRACT_TYPE="LabRegOnt_Contract_Type";
    public static final String JOB_VACANCY_PUBLICATION_DATE="publication_date";
    public static final String JOB_VACANCY_HOW_TO_APPLY="how_to_apply";
    public static final String JOB_VACANCY_EMPLOYMENT_AGENT="employment_agent";
    public static final String JOB_VACANCY_HAS_VACANCY="has_vacancy";
    public static final String JOB_VACANCY_ANONYMOUS="anonymous";
    public static final String JOB_VACANCY="Job_Vacancy";
    public static final String TIME_YEAR="Time_Year";
    public static final String ELEM_HAS_POS="has_pos";
    public static final String ELEM_HAS_VALUE="has_value";
    public static final String ELEM="Elem";
    public static final String TIME_SPECIFICATION_BELONGS_TO_BEGIN_DATE="belongs_to_begin_date";
    public static final String TIME_SPECIFICATION_BELONGS_TO_END_DATE="belongs_to_end_date";
    public static final String TIME_SPECIFICATION="Time_specification";
    public static final String TIME_DATETIMEDESCRIPTION="Time_DateTimeDescription";
    public static final String TIME_DATETIMEINTERVAL="Time_DateTimeInterval";
    public static final String EDUONT_EDUCATION="EduOnt_Education";
    public static final String OCCONT_OCCUPATION="OccOnt_Occupation";
    public static final String LABREGONT_WORK_CONDITION="LabRegOnt_Work_Condition";
    public static final String COMPONT_COMPENSATION="CompOnt_Compensation";
    public static final String VACANCY_REQUIRES_WORK_EXPERIENCE="requires_work_experience";
    public static final String VACANCY_HAS_CONTRACT_TYPE="has_contract_type";
    public static final String VACANCY_IDENTIFIER="Identifier";
    public static final String VACANCY_WORK_LOCATION="Work_Location";
    public static final String VACANCY_JOB_DESCRIPTION="job_description";
    public static final String VACANCY_HAS_COMPENSATION="has_compensation";
    public static final String VACANCY_JOB_NAME="job_name";
    public static final String VACANCY_MAX_AGE="Max_age";
    public static final String VACANCY_REQUIRES_CAR="requires_car";
    public static final String VACANCY_DURATION="duration";
    public static final String VACANCY_END_DATE="End_date";
    public static final String VACANCY_HAS_EDUCATION="has_education";
    public static final String VACANCY_REQUIRES_PROFESSIONAL_AFFILIATION="requires_professional_affiliation";
    public static final String VACANCY_BEGIN_DATE="Begin_date";
    public static final String VACANCY_HAS_WORK_CONDITION="has_work_condition";
    public static final String VACANCY_REQUIRES_FLEXIBILITY_TO_TRAVEL="requires_flexibility_to_travel";
    public static final String VACANCY_MIN_AGE="Min_age";
    public static final String VACANCY_REQUIRES_COMPETENCE="requires_competence";
    public static final String VACANCY="Vacancy";
    public static final String GEOONT_LOCATION="GeoOnt_Location";
    public static final String FIXED_DATE_DATE="date";
    public static final String FIXED_DATE="Fixed_date";
    public static final String ICT_VACANCY="ICT_Vacancy";
    public static final String COMONT_COMPETENCE="ComOnt_Competence";
    public static final String OCCONT_COMPUTING_PROFESSIONALS__213="OccOnt_Computing_professionals__213";

  /**
   * Constructor
  */
  private JobSeekerOntologyOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema occOnt_Computing_professionals__213Schema = new ConceptSchema(OCCONT_COMPUTING_PROFESSIONALS__213);
    add(occOnt_Computing_professionals__213Schema, jobseekerontology.ontology.OccOnt_Computing_professionals__213.class);
    ConceptSchema comOnt_CompetenceSchema = new ConceptSchema(COMONT_COMPETENCE);
    add(comOnt_CompetenceSchema, jobseekerontology.ontology.ComOnt_Competence.class);
    ConceptSchema icT_VacancySchema = new ConceptSchema(ICT_VACANCY);
    add(icT_VacancySchema, jobseekerontology.ontology.ICT_Vacancy.class);
    ConceptSchema fixed_dateSchema = new ConceptSchema(FIXED_DATE);
    add(fixed_dateSchema, jobseekerontology.ontology.Fixed_date.class);
    ConceptSchema geoOnt_LocationSchema = new ConceptSchema(GEOONT_LOCATION);
    add(geoOnt_LocationSchema, jobseekerontology.ontology.GeoOnt_Location.class);
    ConceptSchema vacancySchema = new ConceptSchema(VACANCY);
    add(vacancySchema, jobseekerontology.ontology.Vacancy.class);
    ConceptSchema compOnt_CompensationSchema = new ConceptSchema(COMPONT_COMPENSATION);
    add(compOnt_CompensationSchema, jobseekerontology.ontology.CompOnt_Compensation.class);
    ConceptSchema labRegOnt_Work_ConditionSchema = new ConceptSchema(LABREGONT_WORK_CONDITION);
    add(labRegOnt_Work_ConditionSchema, jobseekerontology.ontology.LabRegOnt_Work_Condition.class);
    ConceptSchema occOnt_OccupationSchema = new ConceptSchema(OCCONT_OCCUPATION);
    add(occOnt_OccupationSchema, jobseekerontology.ontology.OccOnt_Occupation.class);
    ConceptSchema eduOnt_EducationSchema = new ConceptSchema(EDUONT_EDUCATION);
    add(eduOnt_EducationSchema, jobseekerontology.ontology.EduOnt_Education.class);
    ConceptSchema time_DateTimeIntervalSchema = new ConceptSchema(TIME_DATETIMEINTERVAL);
    add(time_DateTimeIntervalSchema, jobseekerontology.ontology.Time_DateTimeInterval.class);
    ConceptSchema time_DateTimeDescriptionSchema = new ConceptSchema(TIME_DATETIMEDESCRIPTION);
    add(time_DateTimeDescriptionSchema, jobseekerontology.ontology.Time_DateTimeDescription.class);
    ConceptSchema time_specificationSchema = new ConceptSchema(TIME_SPECIFICATION);
    add(time_specificationSchema, jobseekerontology.ontology.Time_specification.class);
    ConceptSchema elemSchema = new ConceptSchema(ELEM);
    add(elemSchema, jobseekerontology.ontology.Elem.class);
    ConceptSchema time_YearSchema = new ConceptSchema(TIME_YEAR);
    add(time_YearSchema, jobseekerontology.ontology.Time_Year.class);
    ConceptSchema job_VacancySchema = new ConceptSchema(JOB_VACANCY);
    add(job_VacancySchema, jobseekerontology.ontology.Job_Vacancy.class);
    ConceptSchema labRegOnt_Contract_TypeSchema = new ConceptSchema(LABREGONT_CONTRACT_TYPE);
    add(labRegOnt_Contract_TypeSchema, jobseekerontology.ontology.LabRegOnt_Contract_Type.class);
    ConceptSchema intervalSchema = new ConceptSchema(INTERVAL);
    add(intervalSchema, jobseekerontology.ontology.Interval.class);
    ConceptSchema time_DurationDescriptionSchema = new ConceptSchema(TIME_DURATIONDESCRIPTION);
    add(time_DurationDescriptionSchema, jobseekerontology.ontology.Time_DurationDescription.class);
    ConceptSchema requested_Work_ExperienceSchema = new ConceptSchema(REQUESTED_WORK_EXPERIENCE);
    add(requested_Work_ExperienceSchema, jobseekerontology.ontology.Requested_Work_Experience.class);
    ConceptSchema how_To_ApplySchema = new ConceptSchema(HOW_TO_APPLY);
    add(how_To_ApplySchema, jobseekerontology.ontology.How_To_Apply.class);
    ConceptSchema organizationSchema = new ConceptSchema(ORGANIZATION);
    add(organizationSchema, jobseekerontology.ontology.Organization.class);
    ConceptSchema ecoActOnt_SectorSchema = new ConceptSchema(ECOACTONT_SECTOR);
    add(ecoActOnt_SectorSchema, jobseekerontology.ontology.EcoActOnt_Sector.class);
    ConceptSchema jV_ListSchema = new ConceptSchema(JV_LIST);
    add(jV_ListSchema, jobseekerontology.ontology.JV_List.class);

    // adding AgentAction(s)

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    fixed_dateSchema.add(FIXED_DATE_DATE, time_DateTimeDescriptionSchema, 0, ObjectSchema.UNLIMITED);
    vacancySchema.add(VACANCY_REQUIRES_COMPETENCE, comOnt_CompetenceSchema, 0, ObjectSchema.UNLIMITED);
    vacancySchema.add(VACANCY_MIN_AGE, (TermSchema)getSchema(BasicOntology.INTEGER), 0, ObjectSchema.UNLIMITED);
    vacancySchema.add(VACANCY_REQUIRES_FLEXIBILITY_TO_TRAVEL, (TermSchema)getSchema(BasicOntology.BOOLEAN), 0, ObjectSchema.UNLIMITED);
    vacancySchema.add(VACANCY_HAS_WORK_CONDITION, labRegOnt_Work_ConditionSchema, 0, ObjectSchema.UNLIMITED);
    vacancySchema.add(VACANCY_BEGIN_DATE, time_specificationSchema, 0, ObjectSchema.UNLIMITED);
    vacancySchema.add(VACANCY_REQUIRES_PROFESSIONAL_AFFILIATION, occOnt_OccupationSchema, 0, ObjectSchema.UNLIMITED);
    vacancySchema.add(VACANCY_HAS_EDUCATION, eduOnt_EducationSchema, 0, ObjectSchema.UNLIMITED);
    vacancySchema.add(VACANCY_END_DATE, time_specificationSchema, 0, ObjectSchema.UNLIMITED);
    vacancySchema.add(VACANCY_DURATION, time_DurationDescriptionSchema, 0, ObjectSchema.UNLIMITED);
    vacancySchema.add(VACANCY_REQUIRES_CAR, (TermSchema)getSchema(BasicOntology.BOOLEAN), 0, ObjectSchema.UNLIMITED);
    vacancySchema.add(VACANCY_MAX_AGE, (TermSchema)getSchema(BasicOntology.INTEGER), 0, ObjectSchema.UNLIMITED);
    vacancySchema.add(VACANCY_JOB_NAME, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    vacancySchema.add(VACANCY_HAS_COMPENSATION, compOnt_CompensationSchema, 0, ObjectSchema.UNLIMITED);
    vacancySchema.add(VACANCY_JOB_DESCRIPTION, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    vacancySchema.add(VACANCY_WORK_LOCATION, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    vacancySchema.add(VACANCY_IDENTIFIER, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    vacancySchema.add(VACANCY_HAS_CONTRACT_TYPE, labRegOnt_Contract_TypeSchema, 0, ObjectSchema.UNLIMITED);
    vacancySchema.add(VACANCY_REQUIRES_WORK_EXPERIENCE, requested_Work_ExperienceSchema, 0, ObjectSchema.UNLIMITED);
    time_specificationSchema.add(TIME_SPECIFICATION_BELONGS_TO_END_DATE, vacancySchema, 0, ObjectSchema.UNLIMITED);
    time_specificationSchema.add(TIME_SPECIFICATION_BELONGS_TO_BEGIN_DATE, vacancySchema, 0, ObjectSchema.UNLIMITED);
    elemSchema.add(ELEM_HAS_VALUE, job_VacancySchema, 0, ObjectSchema.UNLIMITED);
    elemSchema.add(ELEM_HAS_POS, (TermSchema)getSchema(BasicOntology.INTEGER), 0, ObjectSchema.UNLIMITED);
    job_VacancySchema.add(JOB_VACANCY_ANONYMOUS, (TermSchema)getSchema(BasicOntology.BOOLEAN), 0, ObjectSchema.UNLIMITED);
    job_VacancySchema.add(JOB_VACANCY_HAS_VACANCY, vacancySchema, 0, ObjectSchema.UNLIMITED);
    job_VacancySchema.add(JOB_VACANCY_EMPLOYMENT_AGENT, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    job_VacancySchema.add(JOB_VACANCY_HOW_TO_APPLY, how_To_ApplySchema, 0, ObjectSchema.UNLIMITED);
    job_VacancySchema.add(JOB_VACANCY_PUBLICATION_DATE, time_DateTimeDescriptionSchema, 0, ObjectSchema.UNLIMITED);
    intervalSchema.add(INTERVAL_DATES, time_DateTimeIntervalSchema, 0, ObjectSchema.UNLIMITED);
    requested_Work_ExperienceSchema.add(REQUESTED_WORK_EXPERIENCE_IS_ASSOCIATED_WITH, vacancySchema, 0, ObjectSchema.UNLIMITED);
    requested_Work_ExperienceSchema.add(REQUESTED_WORK_EXPERIENCE_YEARS, time_YearSchema, 0, ObjectSchema.UNLIMITED);
    how_To_ApplySchema.add(HOW_TO_APPLY_DESCRIPTION, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    how_To_ApplySchema.add(HOW_TO_APPLY_ID, (TermSchema)getSchema(BasicOntology.INTEGER), 0, ObjectSchema.UNLIMITED);
    organizationSchema.add(ORGANIZATION_POSTAL_CODE, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    organizationSchema.add(ORGANIZATION_TELEPHONE, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    organizationSchema.add(ORGANIZATION_CONTACT_PERSON, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    organizationSchema.add(ORGANIZATION_ADDRESS, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    organizationSchema.add(ORGANIZATION_NUMBER_WORKERS, (TermSchema)getSchema(BasicOntology.INTEGER), 0, ObjectSchema.UNLIMITED);
    organizationSchema.add(ORGANIZATION_FULL_NAME, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    organizationSchema.add(ORGANIZATION_HAS_JOB_VACANCY, job_VacancySchema, 0, ObjectSchema.UNLIMITED);
    organizationSchema.add(ORGANIZATION_FAX, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    organizationSchema.add(ORGANIZATION_EMAIL, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    jV_ListSchema.add(JV_LIST_HAS_ELEMS, elemSchema, 0, ObjectSchema.UNLIMITED);

    // adding name mappings

    // adding inheritance
    icT_VacancySchema.addSuperSchema(vacancySchema);
    fixed_dateSchema.addSuperSchema(time_specificationSchema);
    intervalSchema.addSuperSchema(time_specificationSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
